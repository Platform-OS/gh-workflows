name: Capture base screenshots

on:
  workflow_call:
    inputs:
      base-branch-for-capturing:
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}
          paths_ignore: '["**/README.md"]'
          do_not_skip: '["push"]'

  reserve-ci-instance:
    needs: pre_job
      #if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    container: alpine:3.15
    outputs:
      mpkit-url: ${{ steps.reserve.outputs.mpkit-url }}
      report-path: ${{ steps.reserve.outputs.report-path }}
    steps:
      - name: Get ci-instance-url
        id: reserve
        uses: Platform-OS/ci-repository-reserve-instance-url@0.0.9
        with:
          repository-url: https://ci-repository.staging.oregon.platform-os.com
          method: reserve
          pos-ci-repo-token: ${{ secrets.POS_CI_REPO_ACCESS_TOKEN }}

  deploy:
    needs: ["reserve-ci-instance"]
      #if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      MPKIT_URL: ${{ needs.reserve-ci-instance.outputs.mpkit-url }}
      MPKIT_EMAIL: ${{ secrets.MPKIT_EMAIL }}
      MPKIT_TOKEN: ${{ secrets.MPKIT_TOKEN }}
      CI: false
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      DEBUG: 1
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.TIMESTAMP }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            front_app/node_modules
          key: cache-node-modules-${{ hashFiles('front_app/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm run install:ci

      - name: Set SHA
        run: |
          echo "::set-env name=FRONT_APP_SHA::$( git rev-list -1 HEAD -- front_app )"
        shell: bash

      - name: Cache front_app Assets
        id: cache-front_app-assets
        uses: actions/cache@v2
        with:
          path: |
            app/assets/app
            app/views/layouts/app.liquid
          key: ${{env.MPKIT_URL}}-front_app-assets-${{ env.FRONT_APP_SHA }}

      - name: Build front_app
        if: steps.cache-front_app-assets.outputs.cache-hit != 'true'
        env:
          PUBLIC_URL: "${{ env.MPKIT_URL}}/assets/app/"
          REACT_APP_API_URL: "${{env.MPKIT_URL}}/api"
        shell: sh
        run: |
          echo "-----------------------------------------"
          echo $PUBLIC_URL
          echo $REACT_APP_API_URL
          echo "-----------------------------------------"
          npm run --prefix front_app build

      - name: Deploy
        env:
          CI: true
        shell: sh
        run: |
          set -e
          unset DEBUG
          npm -g install @platformos/pos-cli

          sh ./tests/seed.sh

      - name: Set timestamp for capture artifacts
        id: set-timestamp
        shell: sh
        run: echo "TIMESTAMP=$(date '+%y%m%d%H%M%S')" >> $GITHUB_OUTPUT

  capture:
    needs: ["reserve-ci-instance","deploy"]
    runs-on: ubuntu-latest
    container: platformos/testcafe-chrome:4.17.0-3.5.0
    timeout-minutes: 35
    strategy:
      max-parallel: 1
      matrix:
        resolution: ["desktop", "mobile"]
    env:
      MPKIT_EMAIL: ${{ secrets.MPKIT_EMAIL }}
      MPKIT_TOKEN: ${{ secrets.MPKIT_TOKEN }}
      MPKIT_URL: ${{ needs.reserve-ci-instance.outputs.mpkit-url }}
      CI: true
      TIMESTAMP: ${{ needs.deploy.outputs.timestamp }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Install test dependencies
        run: |
          npm install --prefix tests
        shell: sh

      - uses: Platform-OS/gh-action-run-tc-blink-diff-capture-base-snapshots@gh-artifacts
        name: Capture base screenshots for ${{ matrix.resolution }} resolution
        if: success() || failure()
        with:
          base: ${{ inputs.base-branch-for-capturing }}
          npm-prefix: tests
          resolution: ${{ matrix.resolution }}
          test-name: tc-${{ matrix.resolution }}-snapshots-capture
          timestamp: ${{ env.TIMESTAMP }}

  cleanup:
    if: ${{ always() }}
    needs: ["reserve-ci-instance","deploy","capture"]
    runs-on: ubuntu-latest
    container: alpine:3.15
    steps:
      - name: release ci-instance-url
        uses: Platform-OS/ci-repository-reserve-instance-url@0.0.9
        with:
          method: release
          repository-url: https://ci-repository.staging.oregon.platform-os.com
          pos-ci-repo-token: ${{ secrets.POS_CI_REPO_ACCESS_TOKEN }}
